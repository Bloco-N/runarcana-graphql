# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ApiResponse {
  message: String!
}

type Auth {
  token: String!
  user: UserResponse!
}

type Character {
  CharacterElements: [CharacterElement!]!
  CharacterInheritance: [CharacterInheritance!]!
  CharacterMisteries: [CharacterMistery!]!
  CharacterRunarcanaClass: [CharacterRunarcanaClass!]!
  Lineage: Lineage!
  Origin: Origin!
  Past: Past!
  Region: Region!
  SpellCharacters: [SpellCharacter!]!
  _count: CharacterCount
  createdAt: DateTime!
  essence: String!
  exaltation: String!
  expression: String!
  id: Int!
  lineageId: Int!
  name: String!
  originId: Int!
  pastId: Int!
  regionId: Int!
  updatedAt: DateTime!
  userId: Int!
}

type CharacterCount {
  CharacterElements: Int!
  CharacterInheritance: Int!
  CharacterMisteries: Int!
  CharacterRunarcanaClass: Int!
  SpellCharacters: Int!
}

input CharacterCreateInputData {
  essence: String!
  exaltation: String!
  expression: String!
  lineageId: Float!
  name: String!
  originId: Float!
  pastId: Float!
  regionId: Float!
  runarcanaClassId: Float!
}

type CharacterElement {
  Element: Element!
  characterId: Int!
  createdAt: DateTime!
  elementId: Int!
  updatedAt: DateTime!
}

input CharacterIdPair {
  characterId: Float!
  otherId: Float!
}

type CharacterInheritance {
  Inheritance: Inheritance!
  characterId: Int!
  inheritanceId: Int!
}

type CharacterMistery {
  Mystery: Mystery!
  characterId: Int!
  createdAt: DateTime!
  mysteryId: Int!
  updatedAt: DateTime!
}

type CharacterRunarcanaClass {
  RunarcanaClass: RunarcanaClass!
  characterId: Int!
  createdAt: DateTime!
  level: Int!
  runarcanaClassId: Int!
  updatedAt: DateTime!
}

input CharacterUpdateClassInputData {
  id: CharacterIdPair!
  level: Float!
  runarcanaClassId: Float!
}

input CharacterUpdateInputData {
  essence: String!
  exaltation: String!
  expression: String!
  id: Float!
  lineageId: Float!
  name: String!
  originId: Float!
  pastId: Float!
  regionId: Float!
}

type Component {
  _count: ComponentCount
  createdAt: DateTime!
  id: Int!
  name: String!
  symbol: String!
  updatedAt: DateTime!
}

type ComponentCount {
  SpellComponents: Int!
}

type Conjuration {
  _count: ConjurationCount
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type ConjurationCount {
  Spells: Int!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Duration {
  _count: DurationCount
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type DurationCount {
  Spells: Int!
}

type Element {
  ElementIngredients: [ElementIngredient!]!
  ElementRecipes: [ElementRecipe!]!
  _count: ElementCount
  createdAt: DateTime!
  description: String!
  id: Int!
  mysteryId: Int!
  name: String!
  updatedAt: DateTime!
}

type ElementCount {
  CharacterElements: Int!
  ElementIngredients: Int!
  ElementRecipes: Int!
}

type ElementIngredient {
  createdAt: DateTime!
  elementId: Int!
  elementRecipeId: Int!
  updatedAt: DateTime!
}

type ElementRecipe {
  _count: ElementRecipeCount
  createdAt: DateTime!
  elementId: Int!
  id: Int!
  updatedAt: DateTime!
}

type ElementRecipeCount {
  ElementIngredients: Int!
}

type Inheritance {
  _count: InheritanceCount
  atributes: String!
  benefits: String!
  createdAt: DateTime!
  description: String!
  id: Int!
  name: String!
  prerequisites: String!
  rechosen: String!
  updatedAt: DateTime!
}

type InheritanceCount {
  CharacterInheritance: Int!
  InheritanceLineage: Int!
  InheritanceOrigin: Int!
  InheritanceRegion: Int!
}

type InheritanceLineage {
  Inheritance: Inheritance!
  Lineage: Lineage!
  createdAt: DateTime!
  inheritanceId: Int!
  lineageId: Int!
  updatedAt: DateTime!
}

type InheritanceOrigin {
  Inheritance: Inheritance!
  Origin: Origin!
  createdAt: DateTime!
  inheritanceId: Int!
  originId: Int!
  updatedAt: DateTime!
}

type InheritanceRegion {
  Inheritance: Inheritance!
  Region: Region!
  createdAt: DateTime!
  inheritanceId: Int!
  regionId: Int!
  updatedAt: DateTime!
}

type Lineage {
  InheritanceLineage: [InheritanceLineage!]!
  SpellLineages: [SpellLineage!]!
  _count: LineageCount
  createdAt: DateTime!
  id: Int!
  name: String!
  originId: Int!
  updatedAt: DateTime!
}

type LineageCount {
  Characters: Int!
  InheritanceLineage: Int!
  SpellLineages: Int!
}

type Mutation {
  addCharacterClass(data: CharacterIdPair!): ApiResponse!
  addSpellCharacter(data: CharacterIdPair!): ApiResponse!
  createCharacter(data: CharacterCreateInputData!): ApiResponse!
  deleteCharacter(id: Float!): ApiResponse!
  deleteCharacterClass(data: CharacterIdPair!): ApiResponse!
  deleteSpellCharacter(data: CharacterIdPair!): ApiResponse!
  levelUpCharacterClass(data: CharacterIdPair!): ApiResponse!
  signIn(data: SignInInputData!): Auth!
  signUp(data: SignUpInputData!): ApiResponse!
  updateCharacter(data: CharacterUpdateInputData!): ApiResponse!
  updateCharacterClass(data: CharacterUpdateClassInputData!): ApiResponse!
}

type Mystery {
  SpellMysteries: SpellMystery!
  _count: MysteryCount
  createdAt: DateTime!
  description: String!
  id: Int!
  magicalSourceId: Int!
  name: String!
  updatedAt: DateTime!
}

type MysteryCount {
  CharacterMisteries: Int!
  Elements: Int!
  SpellMysteries: Int!
}

type Origin {
  InheritanceOrigin: [InheritanceOrigin!]!
  Lineages: [Lineage!]!
  SpellOrigins: [SpellOrigin!]!
  _count: OriginCount
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type OriginCount {
  Characters: Int!
  InheritanceOrigin: Int!
  Lineages: Int!
  SpellOrigins: Int!
}

type Past {
  _count: PastCount
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type PastCount {
  Characters: Int!
}

type Query {
  listAllSpells(search: String): SpellResponse!
  userInfo(charId: Float): UserResponse
}

type Range {
  _count: RangeCount
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type RangeCount {
  Spells: Int!
}

type Region {
  InheritanceRegion: [InheritanceRegion!]!
  _count: RegionCount
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type RegionCount {
  Characters: Int!
  InheritanceRegion: Int!
}

type RunarcanaClass {
  SpellClasses: [SpellClass!]!
  _count: RunarcanaClassCount
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type RunarcanaClassCount {
  CharacterRunarcanaClass: Int!
  SpellClasses: Int!
}

input SignInInputData {
  password: String!
  username: String!
}

input SignUpInputData {
  nickname: String!
  password: String!
  username: String!
}

type Spell {
  Conjuration: Conjuration!
  Duration: Duration!
  Range: Range!
  SpellComponents: [SpellComponent!]!
  SpellMysteries: [SpellMystery!]!
  _count: SpellCount
  conjurationId: Int!
  createdAt: DateTime!
  description: String!
  durationId: Int!
  id: Int!
  level: Int!
  materials: String!
  name: String!
  rangeId: Int!
  updatedAt: DateTime!
}

type SpellCharacter {
  Spell: Spell!
  characterId: Int!
  createdAt: DateTime!
  spellId: Int!
  updatedAt: DateTime!
}

type SpellClass {
  Spell: Spell!
  classId: Int!
  createdAt: DateTime!
  spellId: Int!
  updatedAt: DateTime!
}

type SpellComponent {
  Component: Component!
  componentId: Int!
  createdAt: DateTime!
  spellId: Int!
  updatedAt: DateTime!
}

type SpellCount {
  SpellCharacters: Int!
  SpellClasses: Int!
  SpellComponents: Int!
  SpellLineages: Int!
  SpellMysteries: Int!
  SpellOrigins: Int!
}

type SpellLineage {
  Spell: Spell!
  createdAt: DateTime!
  lineageId: Int!
  spellId: Int!
  updatedAt: DateTime!
}

type SpellMystery {
  Mystery: Mystery!
  Spell: Spell!
  createdAt: DateTime!
  mysteryId: Int!
  spellId: Int!
  updatedAt: DateTime!
}

type SpellOrigin {
  Spell: Spell!
  createdAt: DateTime!
  originId: Int!
  spellId: Int!
  updatedAt: DateTime!
}

type SpellResponse {
  spells: [Spell!]!
}

type UserResponse {
  characters: [Character!]!
  createdAt: DateTime!
  id: Int!
  nickname: String!
  updatedAt: DateTime!
  username: String!
}
